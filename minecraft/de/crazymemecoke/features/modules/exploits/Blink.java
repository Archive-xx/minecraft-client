package de.crazymemecoke.features.modules.exploits;

import de.crazymemecoke.manager.eventmanager.Event;
import de.crazymemecoke.manager.eventmanager.impl.EventPacket;
import de.crazymemecoke.manager.eventmanager.impl.EventTick;
import de.crazymemecoke.manager.modulemanager.Category;
import de.crazymemecoke.manager.modulemanager.Module;
import de.crazymemecoke.manager.modulemanager.ModuleInfo;
import net.minecraft.client.entity.EntityOtherPlayerMP;
import net.minecraft.entity.Entity;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import org.lwjgl.input.Keyboard;

import java.util.ArrayList;

@ModuleInfo(name = "Blink", category = Category.EXPLOITS, description = "You will cancel all movement packets for a short amount of time")
public class Blink extends Module {
    private final ArrayList<Packet> packets = new ArrayList();

    private EntityOtherPlayerMP fakeEntity;

    @Override
    public void onToggle() {

    }

    public void onEnable() {
        if (mc.theWorld != null) {
            this.fakeEntity = new EntityOtherPlayerMP(mc.theWorld, mc.thePlayer.getGameProfile());
            this.fakeEntity.inventory = mc.thePlayer.inventory;
            this.fakeEntity.copyLocationAndAnglesFrom(mc.thePlayer);
            this.fakeEntity.posY = mc.thePlayer.getEntityBoundingBox().minY;
            this.fakeEntity.rotationPitch = mc.thePlayer.rotationPitch;
            this.fakeEntity.rotationYaw = mc.thePlayer.rotationYaw;
            this.fakeEntity.rotationYawHead = mc.thePlayer.rotationYawHead;
            this.fakeEntity.setSneaking(mc.thePlayer.isSneaking());

            mc.theWorld.addEntityToWorld(64199, this.fakeEntity);

            this.fakeEntity = null;
        }
    }

    public void onDisable() {
        if (mc.theWorld.getEntityByID(64199) != null) {
            mc.theWorld.removeEntityFromWorld(64199);
        }
        for (Packet packet : this.packets) {
            mc.getNetHandler().getNetworkManager().sendPacket(packet);
        }
        this.packets.clear();
    }

    @Override
    public void onEvent(Event event) {

        if(event instanceof EventTick) {
            setDisplayName("[" + this.packets.size() + "] Blink");
        }

        if(event instanceof EventPacket) {
            if(((EventPacket) event).getType() == EventPacket.Type.RECEIVE) {
                if (((((EventPacket) event).getPacket() instanceof S08PacketPlayerPosLook)) && (mc.theWorld.getEntityByID(64199) != null)) {
                    S08PacketPlayerPosLook packet1 = (S08PacketPlayerPosLook) ((EventPacket) event).getPacket();
                    mc.theWorld.getEntityByID(64199).setPositionAndRotation(packet1.getX(),
                            packet1.getY(), packet1.getZ(), packet1.getYaw(), packet1.getPitch());
                    event.setCanceled(true);
                }
            }
            if(((EventPacket) event).getType() == EventPacket.Type.SEND) {
                if (((isMoving(mc.thePlayer)) || (mc.thePlayer.lastTickPosY != mc.thePlayer.posY))
                        && ((((EventPacket) event).getPacket() instanceof C03PacketPlayer))) {
                    event.setCanceled(true);
                    this.packets.add(((EventPacket) event).getPacket());
                }
                if (((((EventPacket) event).getPacket() instanceof C07PacketPlayerDigging))
                        || ((((EventPacket) event).getPacket() instanceof C08PacketPlayerBlockPlacement))
                        || ((((EventPacket) event).getPacket() instanceof C0BPacketEntityAction)) || ((((EventPacket) event).getPacket() instanceof C02PacketUseEntity))
                        || ((((EventPacket) event).getPacket() instanceof C0APacketAnimation))) {
                    event.setCanceled(true);
                    this.packets.add(((EventPacket) event).getPacket());
                }
                if ((((((EventPacket) event).getPacket() instanceof C00PacketKeepAlive) ? 0 : 1)
                        & ((((EventPacket) event).getPacket() instanceof C01PacketChatMessage) ? 0 : 1)
                        & ((((EventPacket) event).getPacket() instanceof C16PacketClientStatus) ? 0 : 1)) != 0) {
                    event.setCanceled(true);
                }
            }
        }
    }

    public boolean isMoving(Entity e) {
        return (e.motionX != 0.0D) && (e.motionZ != 0.0D) && ((e.motionY != 0.0D) || (e.motionY > 0.0D));
    }
}
